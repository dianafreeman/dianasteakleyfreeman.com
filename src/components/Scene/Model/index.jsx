import React, { useRef, useEffect } from "react";
import PropType from "prop-types";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { a, useSpring, config } from "@react-spring/three";

import useWindowDimensions from "@project/hooks/useWindowDimensions";
import Screen from "./Screen";

export default function LaptopModel({ isOpen, setOpen, isFloating, ...rest }) {
  const group = useRef();
  const screenGroup = useRef();
  const keyboardGroup = useRef();
  const { nodes, materials } = useGLTF("/glb/MacBookPro_blend.glb");

  const { screenRotation } = useSpring({
    screenRotation: isOpen ? Math.PI / 2 : 0,
    config: config.molasses,
  });

  const { width, height } = useWindowDimensions();

  useEffect(() => {
    // Center the group on mount
    new THREE.Box3()
      .setFromObject(group.current)
      .getCenter(group.current.position)
      .multiplyScalar(-1);
  }, [width, height]);

  useFrame((state) => {
    if (!group.current) return;
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      isFloating ? Math.cos(t / 2) / 8 + 0.25 : 0,
      0.1
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      isFloating ? Math.sin(t / 2) / 4 : 0,
      0.1
    );
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      isFloating ? Math.sin(t / 2) / 4 : 0,
      0.1
    );
    // group.current.position.y = THREE.MathUtils.lerp(
    //   group.current.position.y,
    //   isOpen ? (-2 + Math.sin(t)) / 3 : -4.3,
    //   0.1
    // );
  });
  /*
  Below was Auto-generated by: https://github.com/pmndrs/gltfjsx
  */
  return (
    <a.group ref={group} dispose={null} {...rest}>
      {/* // Screen Group */}
      <a.group
        ref={screenGroup}
        position={[0.76, 0.73, -0.43]}
        rotation-x={screenRotation}
        rotation-y={0}
        rotation-z={0}
        scale={[1.57, 0.03, 1.43]}
      >
        <mesh
          // Front Laptop Shell
          geometry={nodes.Cube004.geometry}
          material={materials.Outline}
        />
        <mesh
          // screen
          geometry={nodes.Cube004_1.geometry}
          // material={materials.Screen}
        />
        <mesh geometry={nodes.Cube004_6.geometry} material={materials.Camera} />

        <mesh
          // apple logo
          geometry={nodes.Cube004_3.geometry}
          material={materials.Logo}
        />
        <mesh
          // Back Laptop Shell
          geometry={nodes.Cube004_4.geometry}
          material={nodes.Cube004_4.material}
        />
        <mesh
          // Front-facing Camera Ring
          geometry={nodes.Cube004_7.geometry}
          material={materials.Camera1}
        />
        <mesh
          // Camera Activity Ring
          // Add a green mesh to make this look like its running
          geometry={nodes.Cube004_8.geometry}
          material={materials.CameraGreen}
        />

        <Screen isOpen={isOpen} setOpen={setOpen} />
      </a.group>
      <a.group
        ref={keyboardGroup}
        position={[-1.07, 0.7, -1.86]}
        scale={[1.57, 0.03, 1.43]}
      >
        <mesh geometry={nodes.Cube005.geometry}>
          <meshStandardMaterial color="#2b2b2b" />
        </mesh>
        <mesh
          geometry={nodes.Cube005_1.geometry}
          material={nodes.Cube005_1.material}
        />
        <mesh geometry={nodes.Cube005_2.geometry} material={materials.Second} />
        <mesh geometry={nodes.Cube005_3.geometry} material={materials.KeysMain}>
          <meshStandardMaterial color="black" />
        </mesh>
        <mesh
          geometry={nodes.Cube005_4.geometry}
          material={materials.KeysBottom}
        />
        <mesh
          geometry={nodes.Cube005_5.geometry}
          material={materials.TopLine}
        />
        <mesh
          geometry={nodes.Cube005_6.geometry}
          material={materials.DarkGrey}
        />
      </a.group>
    </a.group>
  );
}

useGLTF.preload("/MacBookPro_blend.glb");

LaptopModel.propTypes = {
  isOpen: PropType.bool.isRequired,
  setOpen: PropType.func.isRequired,
};
